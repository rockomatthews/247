# Complete nginx configuration for RTMP streaming
# Place this file at: /etc/nginx/nginx.conf

user www-data;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;

events {
    worker_connections 1024;
    use epoll;
}

# RTMP Configuration
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        allow play all;

        # Main live application
        application live {
            live on;
            
            # Enable HLS
            hls on;
            hls_path /var/www/html/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            
            # Enable DASH (optional)
            dash on;
            dash_path /var/www/html/dash;
            dash_fragment 3;
            dash_playlist_length 60;
            dash_nested on;
            dash_cleanup on;

            # Record streams (optional)
            record all;
            record_path /var/recordings;
            record_unique on;
            record_suffix .flv;

            # Authentication (optional)
            # on_publish http://localhost/auth;
            
            # Webhook notifications (optional)
            # on_publish http://localhost/api/stream/start;
            # on_publish_done http://localhost/api/stream/end;

            # Stream transcoding for multiple qualities
            exec ffmpeg -i rtmp://localhost/live/$name
                -c:v libx264 -c:a aac -b:v 2500k -b:a 128k -vf "scale=1920:1080" -preset fast -g 60 -sc_threshold 0 -f flv rtmp://localhost/hls/$name_1080p
                -c:v libx264 -c:a aac -b:v 1500k -b:a 128k -vf "scale=1280:720" -preset fast -g 60 -sc_threshold 0 -f flv rtmp://localhost/hls/$name_720p
                -c:v libx264 -c:a aac -b:v 800k -b:a 96k -vf "scale=854:480" -preset fast -g 60 -sc_threshold 0 -f flv rtmp://localhost/hls/$name_480p;
        }

        # HLS transcoding application
        application hls {
            live on;
            hls on;
            hls_path /var/www/html/hls;
            hls_fragment 3;
            hls_playlist_length 60;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            
            # Deny direct publishing to this application
            deny publish all;
        }
    }
}

# HTTP Configuration
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=stream:10m rate=1r/s;

    # Main server block for HLS delivery
    server {
        listen 80;
        server_name _;  # Replace with your domain: streaming.yourdomain.com

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Root directory
        root /var/www/html;
        index index.html;

        # HLS streams
        location /hls {
            # CORS headers for cross-origin requests
            add_header Cache-Control no-cache always;
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header Access-Control-Expose-Headers 'Content-Length,Content-Range' always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
                add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }

            # MIME types for HLS
            location ~ \.m3u8$ {
                add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
                add_header Pragma 'no-cache' always;
                add_header Expires '0' always;
                add_header Access-Control-Allow-Origin * always;
            }

            location ~ \.ts$ {
                add_header Cache-Control 'public, max-age=86400' always;
                add_header Access-Control-Allow-Origin * always;
            }

            # Rate limiting for streams
            limit_req zone=stream burst=5 nodelay;

            # Directory structure
            try_files $uri $uri/ =404;
        }

        # DASH streams (optional)
        location /dash {
            add_header Cache-Control no-cache always;
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

            location ~ \.mpd$ {
                add_header Cache-Control 'no-cache, no-store, must-revalidate' always;
            }

            try_files $uri $uri/ =404;
        }

        # RTMP statistics page
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            
            # Restrict access (optional)
            # allow 127.0.0.1;
            # deny all;
        }

        location /stat.xsl {
            root /var/www/html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API endpoints for stream management (optional)
        location /api/ {
            limit_req zone=api burst=10 nodelay;
            
            # Proxy to your backend API
            # proxy_pass http://localhost:3000/api/;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            
            return 404;
        }

        # Default page
        location / {
            try_files $uri $uri/ =404;
        }

        # Block access to hidden files
        location ~ /\. {
            deny all;
        }

        # Security - block common attack vectors
        location ~* \.(php|jsp|cgi)$ {
            deny all;
        }
    }

    # HTTPS server block (uncomment when SSL is setup)
    # server {
    #     listen 443 ssl http2;
    #     server_name streaming.yourdomain.com;
    #
    #     ssl_certificate /etc/letsencrypt/live/streaming.yourdomain.com/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/streaming.yourdomain.com/privkey.pem;
    #
    #     # SSL configuration
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    #
    #     # Same configuration as HTTP server
    #     root /var/www/html;
    #     index index.html;
    #
    #     # Include all location blocks from HTTP server
    #     include /etc/nginx/conf.d/streaming-locations.conf;
    # }

    # Redirect HTTP to HTTPS (uncomment when SSL is setup)
    # server {
    #     listen 80;
    #     server_name streaming.yourdomain.com;
    #     return 301 https://$server_name$request_uri;
    # }
}